---
title: "projekt_ML_2"
author: "Bartosz Czyż"
format: 
  html:
    self-contained: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme:
        light: cosmo
        dark: darkly
    fontsize: 1.0em
    linestretch: 1.5
execute:
  warning: false
  echo: false
  error: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(skimr)
library(nycflights13)
library(tidymodels)
tidymodels_prefer()

?flights
?weather

set.seed(123)

flights_data <-
  flights |>
  mutate(
    arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
    arr_delay = factor(arr_delay),
    date = lubridate::as_date(time_hour)
  ) |>
  inner_join(weather, by = c("origin", "time_hour")) |>
  select(
    dep_time,
    flight,
    origin,
    dest,
    air_time,
    distance,
    carrier,
    date,
    arr_delay,
    time_hour
  ) |>
  na.omit() |>
  mutate_if(is.character, as.factor)

flights_data |>
  count(arr_delay) |>
  mutate(prop = n/sum(n))

flights_data |>
  glimpse()

flights_data |>
  skimr::skim()

set.seed(222)
data_split <- initial_split(
  data = flights_data,
  prop = 3/4
)
train_data <-training(data_split)
test_data = testing(data_split)

flights_rec <-
  recipe(arr_delay ~., data = train_data) |>
  update_role(flight, time_hour, new_role = "ID")

flights_rec |> summary()

flights_data |>
  distinct(date) |>
  mutate(date = as.numeric(date))

flights_rec <- 
  recipe(arr_delay ~ ., data = train_data) |> 
  update_role(flight, time_hour, new_role = "ID") |> 
  step_date(date, features = c("dow", "month")) |> 
  step_holiday(date, 
               holidays = timeDate::listHolidays("US"), 
               keep_original_cols = F)

flights_rec |> summary()

flights_rec |> prep() |> bake(train_data) |> _[1:10,] |> DT::datatable()

flights_rec <- 
  recipe(arr_delay ~ ., data = train_data) |> 
  update_role(flight, time_hour, new_role = "ID") |> 
  step_date(date, features = c("dow", "month")) |> 
  step_holiday(date, 
               holidays = timeDate::listHolidays("US"), 
               keep_original_cols = F) |> 
  step_dummy(all_nominal_predictors())

flights_rec |> summary()

test_data |> 
  distinct(dest) |> 
  anti_join(train_data)

flights_rec <-
  recipe(arr_delay ~ ., data = train_data) |>
  update_role(flight, time_hour, new_role = "ID") |>
  step_date(date, features = c("dow", "month")) |>
  step_holiday(date,
               holidays = timeDate::listHolidays("US"),
               keep_original_cols = F) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_predictors())

flights_rec |> prep()

lr_mod <-
  logistic_reg() |>
  set_engine("glm")

logi_work <- 
  workflow() |> 
  add_model(lr_mod) |> 
  add_recipe(flights_rec)

logi_work

logi_fit <-
  logi_work |>
  fit(data = train_data)

flights_rec |> summary()

logi_fit |>
  extract_fit_parsnip() |>
  tidy()

logi_fit |> extract_recipe()

predict(logi_fit, test_data)

predict(logi_fit, test_data, type = "prob")

pred_test <- 
  augment(logi_fit, test_data) |>
  select(-dest,
         -flight,
         -origin,
         -dep_time,
         -air_time,
         -distance,
         -carrier,
         -date)
pred_test

pred_test  |> 
  roc_curve(truth = arr_delay, .pred_late) |> 
  autoplot()

pred_test |> 
  roc_auc(truth = arr_delay, .pred_late)


```

# cw 2
```{r}
# Załadowanie potrzebnych pakietów
library(tidymodels)
library(openair)
library(skimr)
library(GGally)
library(ggpubr)
library(lubridate)
tidymodels_prefer()

# Wczytanie i przygotowanie danych
set.seed(222)
air <- mydata |> 
  selectByDate(year = 2002) |> 
  na.omit() |> 
  mutate(
    ozone = cut(
      o3,
      breaks = c(-0.1, 10, 53),
      labels = c("Niskie", "Wysokie")
    )
  )

air

# Podział danych z uwzględnieniem stratyfikacji
data_split <- initial_split(air, prop = 0.75, strata = ozone)
train_data <- training(data_split)
test_data <- testing(data_split)

# Tworzenie receptury
rec <- recipe(ozone ~ ., data = train_data) |>
  # Usuwanie niepotrzebnych zmiennych
  step_rm(nox, o3, pm10, pm25, so2, co) |>
  
  # Ekstrakcja cech
  step_mutate(
    month = lubridate::month(date),
  ) |>
  step_rm(date) |>
  
  # Przekształcenie kierunku wiatru
  step_mutate(
    wd_sin = sin(pi * wd / 180),
    wd_cos = cos(pi * wd / 180)
  ) |>
  step_rm(wd) |>
  
  # Transformacja i normalizacja
  step_YeoJohnson(all_numeric_predictors()) |>
  step_normalize(all_numeric_predictors()) |>
  
  # Tworzenie zmiennych dummy
  step_dummy(all_nominal_predictors()) |>
  
  # Usuwanie zmiennych o zerowej wariancji
  step_zv(all_predictors())

# Definicja modelu
lr_mod <- logistic_reg() |>
  set_engine("glm")

# Połączenie w workflow
ozone_wf <- workflow() |>
  add_model(lr_mod) |>
  add_recipe(rec)

# Trenowanie modelu
ozone_fit <- fit(ozone_wf, data = train_data)

# Predykcje i ocena na zbiorze testowym
test_pred <- augment(ozone_fit, test_data)

# Krzywa ROC i AUC
roc_auc <- test_pred |>
  roc_auc(truth = ozone, .pred_Niskie)

roc_curve <- test_pred |>
  roc_curve(truth = ozone, .pred_Niskie) |>
  autoplot() +
  ggtitle(paste("Krzywa ROC (AUC =", round(roc_auc$.estimate, 3), ")"))

# Wyświetlenie wyników
print(roc_curve)

# Podsumowanie modelu
ozone_fit |> 
  extract_fit_parsnip() |> 
  tidy() |> 
  arrange(p.value) |> 
  print(n = 10)
```

